#!/bin/bash

# Global constant for hooks directory
GLOBAL_HOOKS_DIR="$HOME/.git/hooks"
SCRIPT_FILE="pre-push-hook"

# Define colors for output
RED="\033[0;31m"
GREEN="\033[0;32m"
NO_COLOR="\033[0m"

# Function to print error messages
error() {
  echo -e "${RED}❌ ERROR: $1${NO_COLOR}" >&2
}

# Function to print success messages
success() {
  echo -e "${GREEN}✅ $1${NO_COLOR}"
}

# Check if a command exists
check_command() {
  if ! command -v "$1" &> /dev/null; then
    error "$2 command not found. Make sure $2 is installed and available in your PATH."
  fi
}

# Run command with error handling
run_command() {
  echo "$1"

  if ! eval "$1"; then
    error "$2"
  fi
}

# Function to create hooks directory
create_hooks_directory() {
  run_command "mkdir -p ${GLOBAL_HOOKS_DIR}" "Failed to create hooks directory."
}

# Function to copy hook script
copy_hook_script() {
  cd "${GLOBAL_HOOKS_DIR}" || error "Failed to navigate to hooks directory."
  
  run_command "cp {SCRIPT_FILE} ${GLOBAL_HOOKS_DIR}/pre-push" "Failed to copy the pre-push hook script."
}

# Function to make hook script executable
make_hook_executable() {
  cd "${GLOBAL_HOOKS_DIR}" || error "Failed to navigate to hooks directory."
  
  run_command "chmod u+x pre-push" "Failed to make the hook script executable."
}

# Function to configure Git to use hooks directory globally
configure_git_hooks_directory() {
  run_command "git config --global core.hookspath ${GLOBAL_HOOKS_DIR}" "Failed to configure Git to use hooks directory globally."
}

# Main function to execute setup
main() {
  # Create hooks directory if it doesn't exist
  create_hooks_directory
  
  # Copy the pre-push hook script
  copy_hook_script
  
  # Make the hook script executable
  make_hook_executable
  
  # Configure Git to use the hooks directory globally
  configure_git_hooks_directory
  
  # Inform the user about the successful setup
  success "Git hook setup completed successfully."
}

# Execute the main function
main
