#!/bin/bash

# Define colors for output
RED="\033[0;31m"
GREEN="\033[0;32m"
NO_COLOR="\033[0m"

# Function to print error messages
error() {
  echo -e "${RED}❌ ERROR: $1${NO_COLOR}" >&2
}

# Function to print success messages
success() {
  echo -e "${GREEN}✅ $1${NO_COLOR}"
}

# Check if a command exists
check_command() {
  if ! command -v "$1" &> /dev/null; then
    error "$2 command not found. Make sure $2 is installed and available in your PATH."
    exit 1
  fi
}

# Run command with error handling
run_command() {
  echo "$1"

  if ! eval "$1"; then
    error "$2"
    exit 1
  fi
}

# Run Flutter format
run_format() {
  run_command "dart format lib && dart format test" "Formatting failed. Please fix formatting issues before committing."
}

# Run Dart analysis
run_analyze() {
  run_command "dart analyze" "Static analysis failed. Please fix analysis issues before committing."
}

# Run Flutter tests
run_tests() {
  run_command "flutter test" "Tests failed. Please fix failing tests before committing."
}

# Main function to execute pre-commit checks
main() {
  hook_name="pre-push"

  if [ -f .git/hooks/${hook_name} ]; then
    if ! .git/hooks/${hook_name} "$@"; then
      error "Local ${hook_name} hook execution failed."
      exit 1
    fi
  fi

  # Check for necessary tools
  check_command flutter Flutter
  check_command dart Dart

  # Run pre-commit checks
  run_format
  run_analyze
  run_tests

  success "All checks passed. You can proceed with the commit."
}

# Execute the main function
main "$@"
